@page "/students"
@inject HttpClient Http
@inject NavigationManager NavManager

<PageTitle>Students</PageTitle>

<h1>Students</h1>

@if (studentProvider == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="grid" tabindex="-1">
        <QuickGrid ItemsProvider="@studentProvider" Virtualize="true">
            <PropertyColumn Title="Student Id" Property="@(s => s.StudentId)"/>
            <PropertyColumn Title="First Name" Property="@(s => s.FirstName)"/>
            <PropertyColumn Title="Last Name" Property="@(s => s.LastName)"/>
            <PropertyColumn Property="@(s => s.School)"/>
        </QuickGrid>
    </div>
}

@code {
    private GridItemsProvider<Student>? studentProvider;

    protected override async Task OnInitializedAsync()
    {

        studentProvider = async req =>
        {
            var url = NavManager.GetUriWithQueryParameters($"{Constants.BASE_URL}api/students", new Dictionary<string, object?>
            {
                { "skip", req.StartIndex },
                { "limit", req.Count },
            });

            var response = await Http.GetFromJsonAsync<Student[]>(url, req.CancellationToken);
            return GridItemsProviderResult.From(
                items: response!,
                totalItemCount: response!.Length);
        };
    }
}
